function myPipe = erp_pipeline(varargin)
% ERP_PIPELINE - ERP computation pipeline

import meegpipe.node.*;
import misc.process_arguments;
import misc.split_arguments;

CHAN_SELECTION = {'EEG 15', 'EEG REF', 'EEG 81', 'EEG 90', 'EEG 101'};

% For subject 151 must be set to true because all response evs are missing
opt.DiscardMissingResp = true;
[thisArgs, varargin] = split_arguments(fieldnames(opt), varargin);
[~, opt] = process_arguments(opt, thisArgs);

nodeList = {};

% Node: Merge data files from stage2
myImporter = physioset.import.physioset;
thisNode = merge.new('Importer', myImporter);
nodeList = [nodeList {thisNode}];

% Node: Copy
% We need because it may happen that for a given subject there is only one
% block. In that case, the merge block will not generate a new (merged)
% physioset object but will simply load the physioset corresponding to that
% single block. Thus the copy node to prevent modifying the data from the
% previous stage.
thisNode = copy.new;
nodeList = [nodeList {thisNode}];

% Node: Reject bad epochs
mySel  = physioset.event.class_selector('Type', 'stm\+');
myCrit = bad_epochs.criterion.stat.new('Min', -100, 'Max', 100);
thisNode = bad_epochs.new('Criterion', myCrit, 'EventSelector', mySel);
nodeList = [nodeList {thisNode}];

% Node: Interpolate bad channels
thisNode = chan_interp.new('NN', 4);
nodeList = [nodeList {thisNode}];

% Node: Re-reference to mastoids
thisNode = reref.linked('EEG 190', 'EEG 94');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all correct responses (cel = 1) -> N1
evSelector = ssmd_auob.erp_event_selector('StimCel', 1, 'RespValue', 1, ...
    'DiscardMissingResp', opt.DiscardMissingResp); 
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.05 0.15], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'min', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-correct-Stand-N1');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all correct responses (cel = 1) -> P300
evSelector = ssmd_auob.erp_event_selector('StimCel', 1, 'RespValue', 1, ...
    'DiscardMissingResp', opt.DiscardMissingResp); 
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.25 0.6], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'max', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-correct-Stand-P3');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all correct responses (cel = 2) -> N1
evSelector = ssmd_auob.erp_event_selector('StimCel', 2, 'RespValue', 2);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.05 0.15], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'min', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-correct-Targ-N1');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all correct responses (cel = 2) -> P300
evSelector = ssmd_auob.erp_event_selector('StimCel', 2, 'RespValue', 2);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.25 0.6], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'max', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-correct-Targ-P3');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all cel=1 stimuli -> N1
evSelector = ssmd_auob.erp_event_selector('StimCel', 1);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.05 0.15], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'min', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-Stand-N1');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all cel=1 stimuli -> P300
evSelector = ssmd_auob.erp_event_selector('StimCel', 1);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.25 0.6], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'max', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-Stand-P3');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all cel=2 stimuli -> N1
evSelector = ssmd_auob.erp_event_selector('StimCel', 2);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.05 0.15], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'min', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-Targ-N1');
nodeList = [nodeList {thisNode}];

% Node: Compute ERP for all cel=2 stimuli -> P300
evSelector = ssmd_auob.erp_event_selector('StimCel', 2);
thisNode = erp.new(...
    'EventSelector',    evSelector, ...
    'Duration',         1.2, ...
    'Offset',           -0.2, ...
    'Baseline',         [-0.2 0], ...
    'PeakLatRange',     [0.3 0.6], ...
    'AvgWindow',        0.05, ...
    'MinMax',           'max', ...
    'Channels',         CHAN_SELECTION, ...
    'Name',             'erp-Targ-P3');
nodeList = [nodeList {thisNode}];

% The actual pipeline
myPipe = pipeline.new(...
    'NodeList',         nodeList, ...
    'Save',             true,  ...
    'Name',             'erp_pipeline', ...
    varargin{:});

end